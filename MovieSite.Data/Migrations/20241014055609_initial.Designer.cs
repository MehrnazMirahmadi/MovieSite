// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieSite.Data.Context;

#nullable disable

namespace MovieSite.Data.Migrations
{
    [DbContext(typeof(MovieDbContext))]
    [Migration("20241014055609_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MovieSite.Domain.Entities.Box", b =>
                {
                    b.Property<int>("BoxID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BoxID"));

                    b.Property<string>("BoxName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("BoxID");

                    b.ToTable("Boxes");
                });

            modelBuilder.Entity("MovieSite.Domain.Entities.Film", b =>
                {
                    b.Property<int>("FilmID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FilmID"));

                    b.Property<DateTime>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ApprovalUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Capacity")
                        .HasColumnType("bigint");

                    b.Property<string>("CoverImage")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilmTitle")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("JsonLD")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<int>("Minute")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("RegisteringUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Second")
                        .HasColumnType("int");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("FilmID");

                    b.ToTable("Films");
                });

            modelBuilder.Entity("MovieSite.Domain.Entities.FilmBox", b =>
                {
                    b.Property<int>("FilmID")
                        .HasColumnType("int");

                    b.Property<int>("BoxID")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("FilmID", "BoxID");

                    b.HasIndex("BoxID");

                    b.ToTable("FilmBoxes");
                });

            modelBuilder.Entity("MovieSite.Domain.Entities.FilmTag", b =>
                {
                    b.Property<int>("FilmTagID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FilmTagID"));

                    b.Property<int>("FilmID")
                        .HasColumnType("int");

                    b.Property<int>("TagID")
                        .HasColumnType("int");

                    b.HasKey("FilmTagID");

                    b.HasIndex("FilmID");

                    b.HasIndex("TagID");

                    b.ToTable("FilmTags");
                });

            modelBuilder.Entity("MovieSite.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("TagID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagID"));

                    b.Property<Guid>("ApprovalUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("RegisteringUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TagText")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("TagID");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("MovieSite.Domain.Entities.FilmBox", b =>
                {
                    b.HasOne("MovieSite.Domain.Entities.Box", "Box")
                        .WithMany("FilmBoxes")
                        .HasForeignKey("BoxID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieSite.Domain.Entities.Film", "Film")
                        .WithMany("FilmBoxes")
                        .HasForeignKey("FilmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Box");

                    b.Navigation("Film");
                });

            modelBuilder.Entity("MovieSite.Domain.Entities.FilmTag", b =>
                {
                    b.HasOne("MovieSite.Domain.Entities.Film", "Film")
                        .WithMany("FilmTags")
                        .HasForeignKey("FilmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieSite.Domain.Entities.Tag", "Tag")
                        .WithMany("FilmTags")
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MovieSite.Domain.Entities.Box", b =>
                {
                    b.Navigation("FilmBoxes");
                });

            modelBuilder.Entity("MovieSite.Domain.Entities.Film", b =>
                {
                    b.Navigation("FilmBoxes");

                    b.Navigation("FilmTags");
                });

            modelBuilder.Entity("MovieSite.Domain.Entities.Tag", b =>
                {
                    b.Navigation("FilmTags");
                });
#pragma warning restore 612, 618
        }
    }
}
